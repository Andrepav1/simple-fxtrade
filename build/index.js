// Generated by CoffeeScript 2.5.1
(function() {
  var Subscription, _bindAll, _validateRequest, assign, axios, bootstrap, fx, omit, resources;

  axios = require('axios');

  resources = require('./lib');

  Subscription = require('./lib/subscription');

  ({omit, assign} = require('./lib/utils'));

  // Return a replacement with the new httpMethod
  fx = function(method) {
    fx.method = method.toUpperCase();
    return fx;
  };

  // Allows configuration of the fx api
  fx.configure = function(options) {
    return this.options = assign({}, this.options, options);
  };

  // Set the account id context as its needed for most routes
  fx.setAccount = function(id) {
    return this.options.accountId = id;
  };

  // Set the accept date time format
  fx.setDateTimeFormat = function(format) {
    if (format !== 'UNIX' && format !== 'RFC3339') {
      throw new Error('invalid date time format');
    }
    return this.options.dateTimeFormat = format;
  };

  // Execute a raw request
  fx.request = function(req, route, checkAccount = true) {
    var deferred, method, options, ref, ref1, ref2, responseType;
    _validateRequest(this.options, checkAccount);
    method = (ref = this.method) != null ? ref : 'GET';
    this.method = null;
    responseType = 'json';
    if ((req.json != null) && !req.json) {
      responseType = 'text';
    }
    options = {
      method,
      url: (ref1 = req.url) != null ? ref1 : this.endpoint(route),
      headers: {
        Authorization: `Bearer ${this.options.apiKey}`,
        'Accept-Datetime-Format': this.options.dateTimeFormat
      },
      data: req.body,
      params: omit(req, 'body'),
      responseType
    };
    deferred = axios(options);
    if (this.options.fullResponse) {
      return deferred;
    }
    // TODO: The ? are hacks because of the annoying testdouble framework
    // Need to remove them from here and also from the subscribe below
    return deferred != null ? (ref2 = deferred.then(function({status, headers, data}) {
      return assign({}, {status, headers}, data);
    })) != null ? ref2.catch(function(err) {
      var data, headers, ref3, response, status;
      // If no response param then return the whole error
      if (!(err != null ? (ref3 = err.response) != null ? ref3.status : void 0 : void 0)) {
        return Promise.reject(err);
      }
      ({response} = err);
      ({status, headers, data} = response);
      return Promise.reject(assign({}, {status, headers}, data));
    }) : void 0 : void 0;
  };

  fx.subscribe = function(req, route, checkAccount = true) {
    var options, ref, ref1;
    _validateRequest(this.options, checkAccount);
    options = {
      method: 'GET',
      url: (ref = req.url) != null ? ref : this.endpoint(route, 'stream'),
      headers: {
        Authorization: `Bearer ${this.options.apiKey}`,
        'Accept-Datetime-Format': this.options.dateTimeFormat
      },
      params: omit(req, 'body'),
      responseType: 'stream'
    };
    this.method = null;
    return (ref1 = axios(options)) != null ? ref1.then(function({data}) {
      var ref2;
      return new Subscription(data, {
        json: (ref2 = req.json) != null ? ref2 : true
      });
    }) : void 0;
  };

  // Get the fx api endpoint adjusted per route
  fx.endpoint = function(route = '', mode = 'api') {
    var live, version;
    ({live, version} = this.options);
    if (mode !== 'api' && mode !== 'stream') {
      throw new Error('invalid mode');
    }
    switch (false) {
      case !live:
        return `https://${mode}-fxtrade.oanda.com/${version}/${route}`;
      default:
        return `https://${mode}-fxpractice.oanda.com/${version}/${route}`;
    }
  };

  // Ensure certain options are set before request execution
  _validateRequest = function(options, checkAccount) {
    if (!options.apiKey) {
      throw new Error('Api key is not set. Use configure or env OANDA_API_KEY');
    }
    if (checkAccount && !options.accountId) {
      throw new Error('Account id must be set for this request');
    }
  };

  // Ensure deep binding
  _bindAll = function(source, target) {
    var fnName, srcName;
    for (srcName in source) {
      target[srcName] = source[srcName].bind(target);
      for (fnName in source[srcName]) {
        target[srcName][fnName] = source[srcName][fnName].bind(target);
      }
    }
    return target;
  };

  // Bootstrap the api
  bootstrap = function() {
    // Configure the defaults here
    fx.configure({
      apiKey: process.env.OANDA_API_KEY,
      live: false,
      version: 'v3',
      dateTimeFormat: 'RFC3339',
      throwHttpErrors: true
    });
    // Attach additional functions to the api
    assign(fx, resources);
    return _bindAll(resources, fx);
  };

  module.exports = bootstrap();

}).call(this);
