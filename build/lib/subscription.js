// Generated by CoffeeScript 2.5.1
(function() {
  var EventEmitter, Subscription, assign;

  ({EventEmitter} = require('events'));

  ({assign} = require('./utils'));

  Subscription = class Subscription extends EventEmitter {
    constructor(stream, options) {
      super();
      if (stream == null) {
        return;
      }
      this.connected = false;
      this.stream = stream;
      this.options = assign({}, options);
      this.stream.on('data', (data) => {
        var message, messages;
        this.connected = true;
        try {
          // On some occasions OANDA will send multiple JSON messages into the stream
          // which are separated by newline. In those instances we split and parse each
          // message individually ignoring empty strings.
          messages = (function() {
            switch (false) {
              case !this.options.json:
                return data.toString().split(/\r?\n/).filter(Boolean).map(JSON.parse);
              default:
                return [data];
            }
          }).call(this);
          return messages.forEach((message) => {
            return this.emit('data', message);
          });
        } catch (error1) {
          ({message} = error1);
          return this.emit('error', new Error(`Subscription error parsing Oanda response:
Message: ${message}
Data string: ${data.toString()}`));
        }
      });
      this.stream.on('error', (error) => {
        this.connected = false;
        return this.emit('error', error);
      });
      this.stream.on('end', (data) => {
        this.connected = false;
        return this.emit('end', data);
      });
    }

    connect() {
      this.stream();
      return this.connected = true;
    }

    disconnect() {
      this.connected = false;
      return this.stream.req.abort();
    }

  };

  module.exports = Subscription;

}).call(this);
